创建版本库
git init
添加文件到仓库
git add readme.txt
添加所有文件到仓库
git add .
把文件提交到版本库
git commit -m "write a readme file"
查看当前仓库状态
git status
查看修改内容
git diff readme.txt
查看提交日志，可以查看提交历史，以便确定要回退到哪个版本。
git log --pretty=oneline
回退到上一个提交版本
git reset --head HEAD^
指定回到某一个commit版本
git reset --hard 3628164(commit id)
查看命令历史，以便确定要回到未来的哪个版本。
git reflog
撤销修改
(一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态)
git checkout -- readme.txt
把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD readme.txt
删除文件
git rm test.txt
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
把一个已有的本地仓库与之关联
git remote add origin git@github.com:michaelliao/learngit.git
把本地库的所有内容推送到远程库上：
$ git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
git clone git@github.com:michaelliao/gitskills.git
创建dev分支，然后切换到dev分支：
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
git branch命令查看当前分支：
换回master分支：
$ git checkout master
dev分支的工作成果合并到master分支上：
$ git merge dev
删除dev分支
$ git branch -d dev

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

